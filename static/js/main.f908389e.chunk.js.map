{"version":3,"sources":["Components/DateAndInputField.jsx","Components/Footer.jsx","App.js","index.js"],"names":["DateAndInputField","setToDo","setToDos","toDo","toDos","dateObj","Date","weekday","getDay","className","getDate","getMonth","getFullYear","type","placeholder","onInput","e","target","value","title","onClick","length","id","now","text","status","dropped","doneDate","dropDate","Footer","style","color","href","rel","App","useState","useEffect","localStorage","getItem","setItem","JSON","stringify","parse","deleteDoneTask","Swal","fire","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","filter","deleteTask","align","map","task","checkTask","marginBottom","fontSize","fontWeight","getTimeAndDate","droppedTask","tasks","undoTask","dateId","date","hr","getHours","min","getMinutes","ampm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f908389e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction DateAndInputField({ setToDo, setToDos, toDo, toDos }) {\r\n  //To get dates\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  let dateObj = new Date();\r\n  let weekday = days[dateObj.getDay()];\r\n  function getDate() {\r\n    var curr_date = dateObj.getDate();\r\n    var curr_month = dateObj.getMonth() + 1; //Months are zero based\r\n    var curr_year = dateObj.getFullYear();\r\n    let date = curr_date + \"/\" + curr_month + \"/\" + curr_year;\r\n    return date;\r\n  }\r\n  // function to store input task to toDo\r\n  const inputTask = (e) => {\r\n    setToDo(e.target.value);\r\n  };\r\n  // function add tasks to toDos array\r\n  const addTasks = () => {\r\n    // add task if task length is > 0\r\n    if (toDo.length > 0) {\r\n      setToDos([\r\n        ...toDos,\r\n        {\r\n          id: Date.now(),\r\n          text: toDo,\r\n          status: false,\r\n          dropped: false,\r\n          doneDate: null,\r\n          dropDate: null\r\n        },\r\n      ]);\r\n      setToDo(\"\"); // toDo value set to empty string.\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 d-flex justify-content-center\">\r\n          <div className=\"text-center pb-3\">\r\n            <div className=\"subHeading\">\r\n              <br />\r\n              <h2>🙂 Whoop, it's {getDate()} ☕ </h2>\r\n              <h3>{weekday}</h3>\r\n            </div>\r\n            <div className=\"input py-3\">\r\n              <input \r\n                type=\"text\"\r\n                placeholder=\"🖊️ Add tasks...\"\r\n                onInput={inputTask}\r\n                value={toDo}\r\n              />\r\n              <i className=\"fas fa-plus\" title=\"Add\" onClick={addTasks}>\r\n                {\" \"}\r\n              </i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DateAndInputField;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\" row mt-4\" >\r\n      <footer className=\"footer fixed-bottom  bg-dark  text-center text-lg-start \">\r\n        <div className=\"text-center p-3\" style={{ color: \"white\" }}>\r\n          Developed by : Thiyophin Johnson\r\n          <div>\r\n            <a\r\n              href=\"https://github.com/Thiyophin\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <i className=\"fab fa-github \"></i>\r\n            </a>\r\n            &nbsp;\r\n            <a\r\n              href=\"https://www.instagram.com/thiyophin_johnson/\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              <i className=\"fab fa-instagram\"></i>\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\n// import components\r\nimport DateAndInputField from \"./Components/DateAndInputField\";\r\nimport Footer from \"./Components/Footer\";\r\nfunction App() {\r\n  // toDos has an array of object related to task details\r\n  const [toDos, setToDos] = useState([]);\r\n  // toDo state will store input string of task and setToDo can used to change toDo\r\n  const [toDo, setToDo] = useState(\"\");\r\n  // useEffect to get localStorage toDos when mount and unmount\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"toDos\") === null) {\r\n      localStorage.setItem(\"toDos\", JSON.stringify([])); // localStorage store value as key:value, value should be string so we have stringify when inserting\r\n    } else {\r\n      let toDos = JSON.parse(localStorage.getItem(\"toDos\")); // when getting back we have parse and return back todos from string to object.\r\n      setToDos(toDos);\r\n    }\r\n  }, []); // [] array passed so that it works when mounting and unmounting\r\n  // useEffect to update localStorage toDos when toDos array is updated\r\n  useEffect(() => {\r\n    localStorage.setItem(\"toDos\", JSON.stringify(toDos));\r\n  }, [toDos]); // [toDos] passed so work when that array is updated.\r\n  // function to make status true for completed task\r\n  const completedTask = (id) => {\r\n    setToDos(\r\n      toDos.filter((checkTask) => {\r\n        if (checkTask.id === id) {\r\n          checkTask.status = true;\r\n          checkTask.doneDate = Date.now();\r\n        }\r\n        return checkTask;\r\n      })\r\n    );\r\n  };\r\n  // function to make active task to drop\r\n  const droppedTask = (id) => {\r\n    setToDos(\r\n      toDos.filter((droppedTask) => {\r\n        if (droppedTask.id === id) {\r\n          droppedTask.dropped = true;\r\n          droppedTask.dropDate = Date.now();\r\n        }\r\n        return droppedTask;\r\n      })\r\n    );\r\n  };\r\n  //function delete completed tasks or removed tasks\r\n  const deleteDoneTask = (id) => {\r\n    // let checkdelete = window.confirm(\"Do you want to delete this data?\");\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#d33\",\r\n      cancelButtonColor: \"#3085d6\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setToDos(\r\n          toDos.filter((deleteTask) => {\r\n            if (deleteTask.id === id) {\r\n              //  console.log(\"Deleted this\");\r\n              return false;\r\n            }\r\n            //  console.log(\"DOnot delte others\");\r\n            return true;\r\n          })\r\n        );\r\n      }\r\n    });\r\n  };\r\n  // function to undo cancelled task to make it active again\r\n  const undoRemovedTask = (id) => {\r\n    setToDos(\r\n      toDos.filter((undoTask) => {\r\n        if (undoTask.id === id) {\r\n          undoTask.dropped = false;\r\n          undoTask.id = Date.now();\r\n        }\r\n        return undoTask;\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"app container-fluid\">\r\n      <div className=\"mainHeading mt-3\">\r\n        <h1 align=\"center \">ToDo List 📝</h1>\r\n      </div>\r\n      {/* Date and Input */}\r\n      <DateAndInputField\r\n        setToDo={setToDo}\r\n        setToDos={setToDos}\r\n        toDo={toDo}\r\n        toDos={toDos}\r\n      />\r\n      <div className=\"container-fluid mb-10\">\r\n        <div className=\"row\">\r\n          {/* Active tasks */}\r\n          <div className=\"col-md-4 mb-3\">\r\n            <h2 align=\"center \">Active Tasks</h2>\r\n            {/* let's make toDos rendering dynamic here */}\r\n            {toDos.map((task) => {\r\n              //Check task is  not done and not dropped\r\n              if (!task.status && !task.dropped) {\r\n                return (\r\n                  <div className=\"row\" key={task.id}>\r\n                    <div className=\"todos\">\r\n                      <div className=\"todo col-12 bg-warning text-white animate__animated animate__bounceIn animate__faster\">\r\n                        <div className=\"col-1\">\r\n                          {/* filtering  tasks using id and make status to true to checked task,in checkTask all tasks will come check using id and return value by changing status */}\r\n                          <input\r\n                            className=\"checkBox\"\r\n                            type=\"checkbox\"\r\n                            onClick={() => completedTask(task.id)}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <p\r\n                            className=\"todo-content h4 my-2\"\r\n                            style={{ marginBottom: \"0px\", color: \"blue\" }}\r\n                          >\r\n                            {task.text}\r\n                          </p>\r\n                          <p\r\n                            style={{\r\n                              marginBottom: \"\",\r\n                              fontSize: \"0.7em\",\r\n                              color: \"blue\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            Activated on : {getTimeAndDate(task.id)}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"col-1\">\r\n                          {/* make droppped true when dropped is clicked   */}\r\n                          <i\r\n                            className=\"fas fa-times\"\r\n                            style={{ color: \"red\" }}\r\n                            title=\"Drop\"\r\n                            onClick={() => droppedTask(task.id)}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n          </div>\r\n\r\n          {/* Tasks completed */}\r\n          <div className=\"col-md-4 \">\r\n            <h2 align=\"center \">Tasks finished</h2>\r\n            {toDos.map((tasks) => {\r\n              if (tasks.status && !tasks.dropped) {\r\n                return (\r\n                  <div className=\"row\" key={tasks.id}>\r\n                    <div className=\"todos\">\r\n                      <div className=\"todo col-12 bg-success text-white animate__animated animate__bounceIn animate__faster\">\r\n                        <div className=\"col-9 text-center\">\r\n                          <p\r\n                            className=\"todo-content h4 my-2 textCross\"\r\n                            style={{ marginBottom: \"0px\", color: \"orange\" }}\r\n                          >\r\n                            {tasks.text}\r\n                          </p>\r\n                          <p\r\n                            style={{\r\n                              marginBottom: \"\",\r\n                              fontSize: \"0.7em\",\r\n                              color: \"orange\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            Activated on: {getTimeAndDate(tasks.id)} <br />\r\n                            Completed on: {getTimeAndDate(tasks.doneDate)}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"col-1\">\r\n                          <i\r\n                            className=\"fa fa-trash\"\r\n                            title=\"Delete\"\r\n                            style={{ color: \"black\" }}\r\n                            onClick={() => deleteDoneTask(tasks.id)}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n          </div>\r\n          {/* Tasks which are cancelled */}\r\n          <div className=\"col-md-4 mb-3\">\r\n            <h2 align=\"center\"> Tasks cancelled</h2>\r\n            {toDos.map((tasks) => {\r\n              if (tasks.dropped) {\r\n                return (\r\n                  <div className=\"row\" key={tasks.id}>\r\n                    <div className=\"todos\">\r\n                      <div className=\"todo col-12 bg-danger animate__animated animate__bounceIn animate__faster\">\r\n                        <div className=\"col-1\">\r\n                          <i\r\n                            className=\"fa fa-undo\"\r\n                            title=\"Undo\"\r\n                            style={{ color: \"blue\" }}\r\n                            onClick={() => undoRemovedTask(tasks.id)}\r\n                          />\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                          <p\r\n                            className=\"todo-content h4 my-2 textCross\"\r\n                            style={{ marginBottom: \"0px\", color: \"yellow\" }}\r\n                          >\r\n                            {tasks.text}\r\n                          </p>\r\n                          <p\r\n                            style={{\r\n                              marginBottom: \"\",\r\n                              fontSize: \"0.7em\",\r\n                              color: \"yellow\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            Activated on: {getTimeAndDate(tasks.id)} <br />\r\n                            Cancelled on: {getTimeAndDate(tasks.dropDate)}\r\n                          </p>\r\n                        </div>\r\n                        <div className=\"col-1\">\r\n                          <i\r\n                            className=\"fa fa-trash\"\r\n                            title=\"Delete\"\r\n                            style={{ color: \"black\" }}\r\n                            onClick={() => deleteDoneTask(tasks.id)}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n              return null;\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* footer */}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//To get date and time\r\nfunction getTimeAndDate(dateId) {\r\n  var months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n  //console.log(\"dateId\" +dateId)\r\n  var date = new Date(dateId);\r\n  var hr = date.getHours();\r\n  var min = date.getMinutes();\r\n  if (min < 10) {\r\n    min = \"0\" + min;\r\n  }\r\n  var ampm = \"am\";\r\n  if (hr > 12) {\r\n    hr -= 12;\r\n    ampm = \"pm\";\r\n  }\r\n  if (hr === 0) {\r\n    hr = 12;\r\n  }\r\n  var day = date.getDate();\r\n  var month = months[date.getMonth()];\r\n  return day + \" \" + month + \" \" + hr + \":\" + min + ampm;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}